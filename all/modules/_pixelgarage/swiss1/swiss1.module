<?php
/**
 * Provides all functionality needed to build the Swiss1 TV portal.
 * User: ralph
 * Date: 07.05.17
 * Time: 20:02
 */

/**
 * Define the admin menu path of Swiss1 TV
 */
define('SWISS1_ADMIN_MENU_PATH', 'admin/swiss1');

/**
 * Load the Swiss1 media importer.
 */
module_load_include('inc', 'swiss1', 'swiss1.import');


/* -----------------------------------------------------------------
 *  Hook implementation
 * ----------------------------------------------------------------- */

/**
 * Implements hook_permission().
 */
function swiss1_permission() {
  return array(
    'administer swiss1 tv' => array(
      'title' => t('Administer Swiss1 TV'),
      'description' => t('Allows to administer the Swiss1 TV settings.'),
    ),
  );
}

/**
 * Defines the Swiss1 TV menu in the top node of the admin menu.
 * All administration forms of the Swiss1 TV platform are added to this menu.
 */
function swiss1_menu() {
  $items[SWISS1_ADMIN_MENU_PATH] = array(
    'title' => t('Swiss1 TV'),
    'description' => t('Swiss1 TV - «iischalte und erläbe»'),
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer swiss1 tv'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );

  //
  // pxlraffle admin forms
  $items[SWISS1_ADMIN_MENU_PATH . '/import'] = array(
    'title' => t('Media import'),
    'description' => t('Import the newest media files and meta data.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('swiss1_import_settings_form'),
    'access arguments' => array('administer swiss1 tv'),
    'file' => 'swiss1.admin.inc',
    'weight' => 0,
  );
  return $items;
}


/**
 * Disables all video items, which have been expired by the set catch-up rights.
 */
function swiss1_cron() {
  $last_time = variable_get('swiss1_cron_last_run', 0);

  //
  // delete all video streams with an expiration date in the past (catch-up rights)
  $now = date('Y-m-d H:i:s'); // format matters for comparison to work
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'videostream')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_expiration_date', 'value', $now, '<');
  $result = $query->execute();

  if (isset($result['node']) && !empty($result['node'])) {
    node_delete_multiple(array_keys($result['node']));
  }

  //
  // import/update the media files and meta data
  swiss1_media_import();

  //
  // update last run variable
  variable_set('swiss1_cron_last_run', REQUEST_TIME);
}


/**
 * Returns the expiration timestamp value set on the node of the given video (media id).
 *
 * @param int $exp_timestamp
 *    The UNIX timestamp to be overridden by this function.
 * @param $media_id
 *    The media-id of the video to be expired.
 */
function swiss1_video_embed_jwplayer_expiration_timestamp_alter(&$exp_timestamp, $media_id) {
  //
  // get expiration date from the node with the given media id
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'videostream')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_media_id', 'value', $media_id)
    ->range(0,1);
  $result = $query->execute();

  if (isset($result['node'])) {
    $node = node_load(key($result['node']));
    if (!empty($node->field_expiration_date)) {
      $date = $node->field_expiration_date[LANGUAGE_NONE][0]['value'];
      $timestamp = strtotime($date);

      // if no (valid) timestamp is set on the node, don't show video
      $exp_timestamp = $timestamp ? $timestamp : time();
    }
  }
}
