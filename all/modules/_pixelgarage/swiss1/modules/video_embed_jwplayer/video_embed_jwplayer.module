<?php
/**
 * Created by PhpStorm.
 * User: ralph
 * Date: 07.05.17
 * Time: 20:11
 */

/**
 * Defines the JWPlayer content base path.
 */
define('JWPLAYER_CONTENT_BASE_PATH', '//content.jwplatform.com/');

/**
 * Defines the JWPlayer cdn base path.
 */
define('JWPLAYER_CDN_BASE_PATH', '//cdn.jwplatform.com/');

/**
 * Defines access to single line embeddable cloud-hosted players with no media.
 */
define('JWPLAYER_CLOUD_PLAYER_PATH', 'libraries/');

/**
 * Defines access to single line embeddable cloud-hosted players with media.
 */
define('JWPLAYER_CLOUD_PLAYER_MEDIA_PATH', 'players/');

/**
 * Defines access to individual video transcodes.
 */
define('JWPLAYER_VIDEO_PATH', 'videos/');

/**
 * Defines access to video poster images.
 */
define('JWPLAYER_THUMB_PATH', 'thumbs/');

/**
 * Defines access to adaptive bitrate streaming manifests for videos.
 */
define('JWPLAYER_MANIFEST_PATH', 'manifests/');

/**
 * Defines access to video timed text track files.
 */
define('JWPLAYER_TRACK_PATH', 'tracks/');

/**
 * Load the management API methods
 */
module_load_include('inc', 'video_embed_jwplayer', 'video_embed_jwplayer.management');


/* -----------------------------------------------------------------
 *  PHP API Library
 * ----------------------------------------------------------------- */
/**
 * Implements hook_libraries_info().
 */
function video_embed_jwplayer_libraries_info() {
  $libraries['jwplayer_api'] = array(
    'name' => 'JWPlayer Management API',
    'vendor url' => 'https://developer.jwplayer.com/jw-platform/docs/developer-guide/management-api',
    'download url' => 'http://support-static.jwplayer.com/API/php-api-kit-20151013.zip',
    'version callback' => 'video_embed_jwplayer_version_callback',
    'files' => array(
      'php' => array(
        'api.php',
      )
    ),
  );
  return $libraries;
}

function video_embed_jwplayer_version_callback() {
  return '1.4';
}

/**
 * Implements hook_menu().
 */
function video_embed_jwplayer_menu() {
  $items = array();

  $items['admin/config/media/vef/jwplayer_settings'] = array(
    'title' => 'JWPlayer Settings',
    'description' => 'JWPlayer settings for the Video Embed Field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('video_embed_jwplayer_settings_form'),
    'access arguments' => array('administer video styles'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * VEF settings page form callback.
 */
function video_embed_jwplayer_settings_form($form, &$form_state) {
  $form['video_embed_jwplayer_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('JWPLayer API key'),
    '#default_value' => variable_get('video_embed_jwplayer_api_key', ''),
    '#description' => t('Set the API key of your JW platform account. See JW Account->Properties->API Credentials.')
  );
  $form['video_embed_jwplayer_api_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('JWPLayer API secret'),
    '#default_value' => variable_get('video_embed_jwplayer_api_secret', ''),
    '#description' => t('Set the API secret of your JW platform account. See JW Account->Properties->API Credentials.')
  );
  return system_settings_form($form);
}



/* -----------------------------------------------------------------
 *  Video embed field JWPlayer plugin
 * ----------------------------------------------------------------- */

/**
 * Implements hook_video_embed_handler_info().
 */
function video_embed_jwplayer_video_embed_handler_info() {
  $handlers = array();
  $handlers['jwplayer'] = array(
    'title' => 'JWPlayer',
    'function' => 'video_embed_jwplayer_video_callback',
    'thumbnail_default' => drupal_get_path('module', 'video_embed_jwplayer') . '/img/default.jpg',
    'form' => 'video_embed_jwplayer_form_callback',
    'domains' => array(
      'content.jwplatform.com',
    ),
    'defaults' => array(
      'jwplayer_cloud_url' => '',
      'jwplayer_url_signing' => false,
      'jwplayer_api_secret' => '',
      'jwplayer_autostart' => false,
    ),
  );

  return $handlers;
}


/**
 * Handler for JWPlayer videos.
 *
 * @param string $url
 *   The video URL set in the field.
 * @param array $settings
 *   The settings array of the style.
 *
 * @return array
 *   The video render array.
 */
function video_embed_jwplayer_video_callback($url, $settings) {
  //
  // get media id
  $output = array();
  $media_id = _video_embed_jwplayer_get_media_id($url);
  if (!$media_id) {
    // We can't decode the URL - just return the URL as a link.
    $output['#markup'] = l($url, $url);
    return $output;
  }

  //
  // add player script in HEAD
  $player_url = $settings['jwplayer_cloud_url'];
  drupal_add_js($player_url,
    array('type' => 'external', 'scope' => 'header', 'weight' => 1000)
  );

  //
  // get skin settings and add skn css to HEAD


  //
  // get secret, if URL signing is enabled
  $secret = ($settings['jwplayer_url_signing'] && !empty(variable_get('video_embed_jwplayer_api_secret'))) ? variable_get('video_embed_jwplayer_api_secret') : false;

  //
  // define video embed
  $autoplay = $settings['jwplayer_autostart'] ? 'true' : 'false';
  $playlist = 'playlist: [{' .
    'image: "' . _video_embed_jwplayer_get_media_url($media_id, 'jpg', $secret) . '",' .
    'mediaid: "' . $media_id . '",' .
    'sources: [{' .
        'file: "' . _video_embed_jwplayer_get_media_url($media_id, 'mpd', $secret) . '"},{' .
        'file: "' . _video_embed_jwplayer_get_media_url($media_id, 'm3u8', $secret) . '"},{' .
        'file: "' . _video_embed_jwplayer_get_media_url($media_id, 'mp4', $secret, '406p') . '"},{' .
        'file: "' . _video_embed_jwplayer_get_media_url($media_id, 'mp4', $secret, '720p') . '"}]' .
  '}],';

  $video_embed = '<div id="jwplayer-video-embed"></div><script type="text/javaScript">' .
    'jwplayer("jwplayer-video-embed").setup({' .
      $playlist .
      'autostart: ' . $autoplay .
    '});</script>';

  //
  // return render array
  $output['#markup'] = $video_embed;
  return $output;
}


/**
 * A forms api callback, returns the settings form for the provider
 *
 * @param array $defaults
 *    Default/current values for your provider, the currently saved settings
 *    with empty values filled with the defaults provided in info hook
 *
 * @return array
 *    Form as defined by forms api
 */
function video_embed_jwplayer_form_callback($defaults) {
  $form = array();

  $form['jwplayer_cloud_url'] = array(
    '#type' => 'textfield',
    '#size' => '20',
    '#title' => t('Cloud Player Library URL'),
    '#description' => t('The library URL of a specific cloud player in the JW platform.'),
    '#default_value' => $defaults['jwplayer_cloud_url'],
  );
  $form['jwplayer_url_signing'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use URL signing'),
    '#description' => t('Signing URL is a security feature that enables you to lock down public access to videos and/or players.'),
    '#default_value' => $defaults['jwplayer_url_signing'],
  );
  $form['jwplayer_autostart'] = array(
    '#type' => 'checkbox',
    '#title' => t('Autoplay video'),
    '#description' => t('If true, the video is started immediately.'),
    '#default_value' => $defaults['jwplayer_autostart'],
  );

  return $form;
}


/* -----------------------------------------------------------------
 *  Helper functions
 * ----------------------------------------------------------------- */

/**
 * Helper function to get the video media id from the input URL.
 *
 * @param string $url
 *   The video URL set in the field.
 *
 * @return string|bool
 *   The video media ID, or FALSE in case the ID can't be retrieved from the URL.
 */

function _video_embed_jwplayer_get_media_id($url) {
  //
  // the url is in the form: http(s)://content.jwplatform.com/[TYPE/]MEDIA_ID[-TEMP_ID].EXT[?parameters]
  //
  // get file name
  $splits = explode('/', $url);
  $media_id = array_pop($splits);

  //
  // remove extension and signing parameters
  if ($media_id && $pos = strpos($media_id, '.')) {
    $media_id = substr($media_id, 0, $pos);
  }

  //
  // remove template id. if any
  if ($media_id && $pos = strpos($media_id, '-')) {
    $media_id = substr($media_id, 0, $pos);
  }

  return $media_id ? check_plain($media_id) : false;
}

/**
 * Generates a JWPlayer media URL. If $secret is set with the value from the
 * JWPlatform API Credentials, then the URL is signed.
 *
 * @param string $media_id
 *    The media id of the content for which the URL has to be created.
 * @param string $type
 *    The type (extension) of the media file. Supported are: mdp, m3u8, mp4, jpg
 * @param string $secret
 *    The API secret of your account, e.g. "Jau8Ya71hakdpF0A".
 * @param string $quality
 *    The quality of a video file (type = mp4). Supported are: 180p, 270p, 406p, 720p. Default is no specific quality.
 * @param string $domain
 *    The masked domain name you want to use for signing the content, e.g.
 *    "https://video.mysite.com". Use this if you have setup DNS masking. Defaults to
 *    "//content.jwplatform.com/".
 *
 * @return string The signed url.
 * The signed url.
 */
function _video_embed_jwplayer_get_media_url($media_id, $type, $secret, $quality = '', $domain = JWPLAYER_CONTENT_BASE_PATH) {
  //
  // create path according to the input parameters
  $qualities = video_embed_jwplayer_get_available_transcoding_templates();

  switch ($type) {
    case 'mdp':
    case 'm3u8':
      $path = JWPLAYER_MANIFEST_PATH . $media_id;
      break;
    case 'mp4':
      $path = JWPLAYER_VIDEO_PATH . $media_id;
      $templ_id = !empty($quality) ? array_search($quality, $qualities) : '';
      if (!empty($templ_id)) {
        $path .= '-' . $templ_id;
      }
      break;
    case 'jpg':
    case 'jpeg':
      $path = JWPLAYER_THUMB_PATH . $media_id;
      $type = 'jpg';
      break;
    default:
      $path = $media_id;
  }
  $path .= '.' . $type;
  $media_url = $domain . $path;

  //
  // sign the URL, if a secret is available
  if ($secret) {
    //
    // set default expiration date
    $exp_timestamp = time() + 2 * 3600;

    //
    // allow others to alter expiration timestamp
    drupal_alter('video_embed_jwplayer_expiration_timestamp', $exp_timestamp, $media_id);

    //
    // create signed URL
    $signature = md5($path . ':' . $exp_timestamp . ':' . $secret);
    $media_url .= '?exp=' . $exp_timestamp . '&sig=' . $signature;
  }

  return $media_url;
};


